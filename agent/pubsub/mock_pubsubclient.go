// Code generated by MockGen. DO NOT EDIT.
// Source: agent/pubsub/pubsubclient.go

// Package pubsub is a generated GoMock package.
package pubsub

import (
	pubsub "cloud.google.com/go/pubsub"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPS is a mock of PS interface
type MockPS struct {
	ctrl     *gomock.Controller
	recorder *MockPSMockRecorder
}

// MockPSMockRecorder is the mock recorder for MockPS
type MockPSMockRecorder struct {
	mock *MockPS
}

// NewMockPS creates a new mock instance
func NewMockPS(ctrl *gomock.Controller) *MockPS {
	mock := &MockPS{ctrl: ctrl}
	mock.recorder = &MockPSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPS) EXPECT() *MockPSMockRecorder {
	return m.recorder
}

// Topic mocks base method
func (m *MockPS) Topic(id string) PSTopic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", id)
	ret0, _ := ret[0].(PSTopic)
	return ret0
}

// Topic indicates an expected call of Topic
func (mr *MockPSMockRecorder) Topic(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockPS)(nil).Topic), id)
}

// TopicInProject mocks base method
func (m *MockPS) TopicInProject(id, projectID string) PSTopic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicInProject", id, projectID)
	ret0, _ := ret[0].(PSTopic)
	return ret0
}

// TopicInProject indicates an expected call of TopicInProject
func (mr *MockPSMockRecorder) TopicInProject(id, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicInProject", reflect.TypeOf((*MockPS)(nil).TopicInProject), id, projectID)
}

// Subscription mocks base method
func (m *MockPS) Subscription(id string) PSSubscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscription", id)
	ret0, _ := ret[0].(PSSubscription)
	return ret0
}

// Subscription indicates an expected call of Subscription
func (mr *MockPSMockRecorder) Subscription(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscription", reflect.TypeOf((*MockPS)(nil).Subscription), id)
}

// MockPSTopic is a mock of PSTopic interface
type MockPSTopic struct {
	ctrl     *gomock.Controller
	recorder *MockPSTopicMockRecorder
}

// MockPSTopicMockRecorder is the mock recorder for MockPSTopic
type MockPSTopicMockRecorder struct {
	mock *MockPSTopic
}

// NewMockPSTopic creates a new mock instance
func NewMockPSTopic(ctrl *gomock.Controller) *MockPSTopic {
	mock := &MockPSTopic{ctrl: ctrl}
	mock.recorder = &MockPSTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPSTopic) EXPECT() *MockPSTopicMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockPSTopic) Publish(ctx context.Context, msg *pubsub.Message) PSPublishResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, msg)
	ret0, _ := ret[0].(PSPublishResult)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockPSTopicMockRecorder) Publish(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPSTopic)(nil).Publish), ctx, msg)
}

// Stop mocks base method
func (m *MockPSTopic) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockPSTopicMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPSTopic)(nil).Stop))
}

// ID mocks base method
func (m *MockPSTopic) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPSTopicMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPSTopic)(nil).ID))
}

// Delete mocks base method
func (m *MockPSTopic) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPSTopicMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPSTopic)(nil).Delete), ctx)
}

// Exists mocks base method
func (m *MockPSTopic) Exists(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockPSTopicMockRecorder) Exists(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPSTopic)(nil).Exists), ctx)
}

// MockPSSubscription is a mock of PSSubscription interface
type MockPSSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockPSSubscriptionMockRecorder
}

// MockPSSubscriptionMockRecorder is the mock recorder for MockPSSubscription
type MockPSSubscriptionMockRecorder struct {
	mock *MockPSSubscription
}

// NewMockPSSubscription creates a new mock instance
func NewMockPSSubscription(ctrl *gomock.Controller) *MockPSSubscription {
	mock := &MockPSSubscription{ctrl: ctrl}
	mock.recorder = &MockPSSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPSSubscription) EXPECT() *MockPSSubscriptionMockRecorder {
	return m.recorder
}

// Receive mocks base method
func (m *MockPSSubscription) Receive(ctx context.Context, f func(context.Context, *pubsub.Message)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive
func (mr *MockPSSubscriptionMockRecorder) Receive(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockPSSubscription)(nil).Receive), ctx, f)
}

// ID mocks base method
func (m *MockPSSubscription) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPSSubscriptionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPSSubscription)(nil).ID))
}

// Delete mocks base method
func (m *MockPSSubscription) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPSSubscriptionMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPSSubscription)(nil).Delete), ctx)
}

// Config mocks base method
func (m *MockPSSubscription) Config(ctx context.Context) (PSSubscriptionConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config", ctx)
	ret0, _ := ret[0].(PSSubscriptionConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config
func (mr *MockPSSubscriptionMockRecorder) Config(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockPSSubscription)(nil).Config), ctx)
}

// Exists mocks base method
func (m *MockPSSubscription) Exists(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockPSSubscriptionMockRecorder) Exists(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPSSubscription)(nil).Exists), ctx)
}

// MockPSPublishResult is a mock of PSPublishResult interface
type MockPSPublishResult struct {
	ctrl     *gomock.Controller
	recorder *MockPSPublishResultMockRecorder
}

// MockPSPublishResultMockRecorder is the mock recorder for MockPSPublishResult
type MockPSPublishResultMockRecorder struct {
	mock *MockPSPublishResult
}

// NewMockPSPublishResult creates a new mock instance
func NewMockPSPublishResult(ctrl *gomock.Controller) *MockPSPublishResult {
	mock := &MockPSPublishResult{ctrl: ctrl}
	mock.recorder = &MockPSPublishResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPSPublishResult) EXPECT() *MockPSPublishResultMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPSPublishResult) Get(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPSPublishResultMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPSPublishResult)(nil).Get), ctx)
}

// MockPSSubscriptionConfig is a mock of PSSubscriptionConfig interface
type MockPSSubscriptionConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPSSubscriptionConfigMockRecorder
}

// MockPSSubscriptionConfigMockRecorder is the mock recorder for MockPSSubscriptionConfig
type MockPSSubscriptionConfigMockRecorder struct {
	mock *MockPSSubscriptionConfig
}

// NewMockPSSubscriptionConfig creates a new mock instance
func NewMockPSSubscriptionConfig(ctrl *gomock.Controller) *MockPSSubscriptionConfig {
	mock := &MockPSSubscriptionConfig{ctrl: ctrl}
	mock.recorder = &MockPSSubscriptionConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPSSubscriptionConfig) EXPECT() *MockPSSubscriptionConfigMockRecorder {
	return m.recorder
}

// Topic mocks base method
func (m *MockPSSubscriptionConfig) Topic() PSTopic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(PSTopic)
	return ret0
}

// Topic indicates an expected call of Topic
func (mr *MockPSSubscriptionConfigMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockPSSubscriptionConfig)(nil).Topic))
}
